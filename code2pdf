#!/usr/bin/ruby
#
# code2pdf
# Created by Lucas Caton at 2011, may 31
# Updated at 2011, may 31
#

require 'optparse'
require 'rubygems'
require 'prawn'
require 'convert_to_pdf'

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: code2pdf <project path>\n\nYou can use flags as such:"

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

  if ARGV.size < 1
    puts opts
    exit
  end
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  puts e
  exit
end

PATH = ARGV[0].gsub(/\/$/, '')

BLACK_LIST_DIRECTORIES = [
  "#{PATH}/.git",
  "#{PATH}/db/backups",
  "#{PATH}/db/migrate",
  "#{PATH}/doc/api",
  "#{PATH}/doc/app",
  "#{PATH}/log",
  "#{PATH}/public/applets",
  "#{PATH}/public/flash",
  "#{PATH}/public/flashs",
  "#{PATH}/public/images",
  "#{PATH}/public/javascripts/kawaii",
  "#{PATH}/public/javascripts/vendor",
  "#{PATH}/public/packages",
  "#{PATH}/public/stylesheets/kawaii",
  "#{PATH}/public/stylesheets/vendor",
  "#{PATH}/public/system",
  "#{PATH}/script",
  "#{PATH}/spec",
  "#{PATH}/tmp",
  "#{PATH}/vendor"
]

BLACK_LIST_FILES = [
  '.DS_Store',
  '.eprj',
  '.gitignore',
  '.rspec',
  '.rvmrc',
  'database.yml',
  'location.yml',
  'nbproject',
  'controls.js',
  'date.js',
  'dragdrop.js',
  'effects.js',
  'facebox.js',
  'jquery-1.4.min.js',
  'jquery.rest_in_place.js',
  'markerlight.js',
  'prototype.js',
  'raphael-min.js',
  'sorttable.js',
  'tinybox.js'
]

@code_files = []

# Check if path exists
if !File.exists?(PATH) || FileTest.file?(PATH)
  puts "'#{PATH}' path does not exist or it is not a directory."
  exit
end

# Read code files from path
def read_code_files_from_path(path)
  Dir.foreach path do |it|
    path_and_name = "#{path}/#{it}"
    if FileTest.directory?(path_and_name) && it != '.' && it != '..'
      read_code_files_from_path path_and_name unless BLACK_LIST_DIRECTORIES.include? path_and_name
    elsif FileTest.file?(path_and_name) && !BLACK_LIST_FILES.include?(it)
      puts "Processing => #{path_and_name}"
      file = File.open(path_and_name, 'r')
      file_content = ''
      line_number = 1
      file.each_line do |line|
        file_content << line.gsub(/</, '&lt;').gsub(/^/, "<color rgb='AAAAAA'>#{line_number}</color>  "); line_number += 1
      end
      file.close
      @code_files << ["File: <strong>#{path_and_name}</strong>", file_content]
    end
  end
end

read_code_files_from_path PATH

# Convert to PDF
puts "\n\nConverting to PDF..."
filename = PATH.gsub(/(\.|\/)/, '_')
pdf = ConvertToPDF.new "#{filename}.pdf", @code_files
pdf.save
